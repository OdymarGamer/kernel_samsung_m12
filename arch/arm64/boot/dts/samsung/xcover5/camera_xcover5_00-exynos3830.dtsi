/*
 * Samsung Exynos SoC series Pablo driver
 *
 * Copyright (c) 2020 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#include <dt-bindings/camera/exynos_is_dt.h>
#include <dt-bindings/interrupt-controller/exynos3830.h>
#include <dt-bindings/clock/exynos3830.h>

#include "../camera/vendor_dt/xcover5/camera_xcover5_common_exynos850.dtsi"
#include "../exynos_gpio_config_macros.dtsi"

/***** reference symbol node *****/
&exynos_is {

	pinctrl-names = "default","sleep";
	pinctrl-1 = <&flash_off_state>;

	vender {
		rear_sensor_id = <58>;   /* S5K2P6 */
		front_sensor_id = <210>; /* GC5035 */
		need_i2c_config;
		//use_module_check;
		//skip_cal_loading;
		//check_sensor_vendor;

		/* for Factory Test */
		max_supported_camera = <2>;
		supported_cameraId = <0 1>;
		/* REAR, FRONT*/

		max_camera_num = <2>;
		camera_info0 {                 /* 0 : rear - S5K2P6 */
			isp = <0>;             /* 0 : INT , 1 : EXT , 2 : SOC */
			cal_memory = <2>;      /* 0 : N , 1 : FROM , 2 : EEPROM , 3 : OTP  */
			read_version = <0>;    /* 0 : SYSFS , 1 : CAMON */
			core_voltage = <0>;    /* 0 : N , 1 : Y  */
			upgrade = <0>;         /* 0 : N , 1 : SYSFS , 2 : CAMON */
			fw_write = <0>;        /* 0 : N , 1 : OS, 2 : SD, 3 : ALL */
			fw_dump = <0>;         /* 0 : N , 1 : Y */
			companion = <0>;       /* 0 : N , 1 : Y  */
			ois = <0>;             /* 0 : N , 1 : Y  */
			valid = <1>;           /* 0 : INVALID, 1 : VALID */
			dual_open = <0>;       /* 0 : SINGLE_OPEN , 1 : DUAL_OPEN */
			position = <0>;        /* 0 : Rear, 1:Front, 2:Rear2, 3:Front2, 4:Rear3, 5:Front3, 6:Rear4*/
		};
		camera_info1 {                 /* 1 : front1 - GC5035 */
			isp = <0>;             /* 0 : INT , 1 : EXT , 2 : SOC */
			cal_memory = <3>;      /* 0 : N , 1 : FROM , 2 : EEPROM , 3 : OTP  */
			read_version = <0>;    /* 0 : SYSFS , 1 : CAMON */
			core_voltage = <0>;    /* 0 : N , 1 : Y  */
			upgrade = <0>;         /* 0 : N , 1 : SYSFS , 2 : CAMON */
			fw_write = <0>;        /* 0 : N , 1 : OS, 2 : SD, 3 : ALL */
			fw_dump = <0>;         /* 0 : N , 1 : Y */
			companion = <0>;       /* 0 : N , 1 : Y  */
			ois = <0>;             /* 0 : N , 1 : Y  */
			valid = <1>;           /* 0 : INVALID, 1 : VALID */
			dual_open = <0>;       /* 0 : SINGLE_OPEN , 1 : DUAL_OPEN */
			position = <1>;        /* 0 : Rear, 1:Front, 2:Rear2, 3:Front2, 4:Rear3, 5:Front3, 6:Rear4*/
		};
	};
};

&pinctrl_5 {
	/* FRONT */
	/* No pull-up resistor, use internal one */
	hsi2c_0_bus: hsi2c_0-bus {
		samsung,pins = "gpc1-0", "gpc1-1";
		samsung,pin-function = <2>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	hsi2c_0_bus_in: hsi2c_0-bus-in {
		samsung,pins = "gpc1-0", "gpc1-1";
		samsung,pin-function = <3>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	/* REAR */
	/* No pull-up resistor, use internal one */
	hsi2c_1_bus: hsi2c_1-bus {
		samsung,pins = "gpc1-2", "gpc1-3";
		samsung,pin-function = <2>; 
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	hsi2c_1_bus_in: hsi2c_1-bus-in {
		samsung,pins = "gpc1-2", "gpc1-3";
		samsung,pin-function = <3>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	/* rear EEPROM, Actuator */
	i2c_4_bus: i2c_4-bus {
		samsung,pins = "gpp1-2", "gpp1-3";
		samsung,pin-function = <2>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	i2c_4_bus_in: i2c_4-bus-in {
		samsung,pins = "gpp1-2", "gpp1-3";
		samsung,pin-function = <3>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	}; 
	
	flash_off_state: flash_off_state {
		gpg2-2{
			samsung,pins = "gpg2-2";
			samsung,pin-con-pdn = <PIN_PDN_INPUT>;
			samsung,pin-pud-pdn = <PIN_PULL_DOWN>;
			samsung,pin-val = <0>;
		};
		gpg2-3{
			samsung,pins = "gpg2-3";
			samsung,pin-con-pdn = <PIN_PDN_INPUT>;
			samsung,pin-pud-pdn = <PIN_PULL_DOWN>;
			samsung,pin-val = <0>;
		};
		gpg2-5{
			samsung,pins = "gpg2-5";
			samsung,pin-con-pdn = <PIN_PDN_PREV>;
			samsung,pin-pud-pdn = <PIN_PULL_NONE>;
		};
	};
};

&hsi2c_0 {
	#address-cells = <1>;
	#size-cells = <0>;
	gpios = <&gpc1 0 0 &gpc1 1 0>;
	status = "okay";
	clock-frequency = <400000>;
	samsung,reset-before-trans;

	pinctrl-names = "default","on_i2c","off_i2c";
	pinctrl-0 = <&hsi2c_0_bus_in>;
	pinctrl-1 = <&hsi2c_0_bus>;
	pinctrl-2 = <&hsi2c_0_bus_in>;

	is-gc5035@6E {
		compatible = "samsung,exynos-is-cis-gc5035";
		reg = <0x37>;
		id = <1>; /* matching sensor id */
		sensor_f_number = <220>; /* f number 2.2 */
		setfile = "setC"; /* setC is for B_FIRST Bayer Order (Mirror+Updown) */
		use_sensor_otp;
		rom_position = <1>;
		use_initial_ae;
	};
};

&hsi2c_1 {
	#address-cells = <1>;
	#size-cells = <0>;
	gpios = <&gpc1 2 0 &gpc1 3 0>;
	status = "okay";
	clock-frequency = <400000>;
	samsung,scl-extended-low-period;
	samsung,reset-before-trans;

	pinctrl-names = "default","on_i2c","off_i2c";
	pinctrl-0 = <&hsi2c_1_bus_in>;
	pinctrl-1 = <&hsi2c_1_bus>;
	pinctrl-2 = <&hsi2c_1_bus_in>;

	is-2p6@5A {
		compatible = "samsung,exynos5-fimc-is-cis-2p6";
		reg = <0x2D>; 
		id = <0>; /* matching sensor id */
		sensor_f_number = <180>; /* f number 1.8 */
		use_pdaf;
		setfile = "setB";
	};
};

&i2c_4 {
	#address-cells = <1>;
	#size-cells = <0>;
	gpios = <&gpp1 2 0 &gpp1 3 0>;
	status = "okay";
	samsung,i2c-sda-delay = <100>;
	samsung,i2c-max-bus-freq = <400000>;

	pinctrl-names = "default","on_i2c","off_i2c";
	pinctrl-0 = <&i2c_4_bus_in>;
	pinctrl-1 = <&i2c_4_bus>;
	pinctrl-2 = <&i2c_4_bus_in>;

	is-actuator@18 {
		compatible = "samsung,exynos-is-actuator-fp5529";
		reg = <0x0C>;
		id = <0>; // matching is_sensor id 
		place = <0>;
	};

	rear_eeprom@B0 {
		compatible = "samsung,rear-eeprom-i2c";
		reg = <0x58>;			/* 7bit-addr */
	};

};

&is_sensor0 {
	#address-cells = <1>;
	#size-cells = <1>;
	scenario = <SENSOR_SCENARIO_NORMAL>;	/* Normal, Vision, OIS etc */
	id = <0>;
	csi_ch = <1>;
	dma_ch = <0 0 0 0>;
	vc_ch = <0 1 2 3>;
	flite_ch = <FLITE_ID_NOTHING>;
	use_ssvc1_internal;
	is_bns = <0>;
	csi_mux = <0x21>;	/* IPP_INPUT = (ipp1_in << 4 | ipp0_in) = (CSI_ID_C << 4 | CSI_ID_B) */
	status = "okay";
	reg =	<0x0 0x14410000 0x1000>, /* MIPI-CSI1 */
			<0x0 0x144A0000 0x10000>; /* PHY: m0s4s4s2 */
	reg-names = "csi", "phy";
	interrupts = <0 INTREQ__CSIS1 IRQ_TYPE_LEVEL_HIGH>, /* MIPI-CSI1 */
			<0 INTREQ__CSIS_DMA_0 IRQ_TYPE_LEVEL_HIGH>,
			<0 INTREQ__CSIS_DMA_0 IRQ_TYPE_LEVEL_HIGH>,
			<0 INTREQ__CSIS_DMA_0 IRQ_TYPE_LEVEL_HIGH>,
			<0 INTREQ__CSIS_DMA_0 IRQ_TYPE_LEVEL_HIGH>;
	interrupt-names = "csi",
			"mode0_VC0", "mode0_VC1", "mode0_VC2", "mode0_VC3";
	phys = <&mipi_phy_csis1_m0s4s4s2 0>;
	phy-names = "csis_dphy";

	/* without PAF HW */
	sensor0_ch_mode0: sensor0-ch-mode0 {
		reg = <0x14431000 0x100>, /* DMA0 VC0 */
			<0x14431400 0x100>, /* DMA0 Common */
			<0x14431100 0x100>, /* DMA0 VC1 */
			<0x14431400 0x100>, /* DMA0 Common */
			<0x14431200 0x100>, /* DMA0 VC2 */
			<0x14431400 0x100>, /* DMA0 Common */
			<0x14431300 0x100>, /* DMA0 VC3 */
			<0x14431400 0x100>; /* DMA0 Common */
	};
};

&is_sensor1 {
	#address-cells = <1>;
	#size-cells = <1>;
	scenario = <SENSOR_SCENARIO_NORMAL>;    /* Normal, Vision, OIS etc */
	id = <1>;
	csi_ch = <0>;
	dma_ch = <1 1 1 1>;
	vc_ch = <0 1 2 3>;
	flite_ch = <FLITE_ID_NOTHING>;
	is_bns = <0>;
	csi_mux = <0x1>;	/* IPP_INPUT = (ipp1_in << 4 | ipp0_in) = (CSI_ID_A << 4 | CSI_ID_B) */
	status = "okay";

	reg = <0x0 0x14400000 0x1000>, /* MIPI-CSI0 */
		<0x0 0x14490000 0x10000>; /* PHY: m0s4s4s2 */
	reg-names = "csi", "phy";
	interrupts = <0 INTREQ__CSIS0 IRQ_TYPE_LEVEL_HIGH>, /*MIPI-CSI0 */
		<0 INTREQ__CSIS_DMA_1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA_1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA_1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA_1 IRQ_TYPE_LEVEL_HIGH>;
	interrupt-names = "csi",
		"mode0_VC0", "mode0_VC1", "mode0_VC2", "mode0_VC3";
	phys = <&mipi_phy_csis0_m0s4s4s2 0>;
	phy-names = "csis_dphy";

	/* without PAF HW */
	sensor1_ch_mode0: sensor1-ch-mode0 {
		reg = <0x14432000 0x100>, /* DMA1 VC0 */
			<0x14432400 0x100>, /* DMA1 Common */
			<0x14432100 0x100>, /* DMA1 VC1 */
			<0x14432400 0x100>, /* DMA1 Common */
			<0x14432200 0x100>, /* DMA1 VC2 */
			<0x14432400 0x100>, /* DMA1 Common */
			<0x14432300 0x100>, /* DMA1 VC3 */
			<0x14432400 0x100>; /* DMA1 Common */
	};
};

/* FLASH-LED : leds-s2mu106 */
&i2c_0 {
	s2mu106@3D{
		flash_led {
			default_current = <50>;
			max_current = <100>;
			default_timer = <0>;
			torch-gpio = <&gpg2 5 0x1>; /* Controls FLED1 Torch mode for Flashlight */
			flash-gpio = <&gpg2 2 0x1>; /* Controls FLED2 Flash mode for Flash Capture */
			flash-set-gpio = <&gpg2 3 0x1>; /* Controls FLED2 Torch mode for Video Flash */
			camera_fled_channel = <2>; /* FLED channel for Camera */
			flashlight_channel = <1>; /* FLED channel for Flashlight */
			camera_flash_en_fgpio = <1>; /* FGPIO pin on IFPMIC that controls Flash Enable mode for camera FLED channel */
			camera_torch_en_fgpio = <2>; /* FGPIO pin on IFPMIC that controls Torch Enable mode for camera FLED channel */
			flashlight_en_fgpio = <4>; /* FGPIO pin on IFPMIC that controls Torch Enable mode for Flashlight FLED channel */
			flash_current = <1200>;
			preflash_current = <160>;
			movie_current = <160>;
			torch_current = <70>;
			factory_torch_current = <220>;
			factory_flash_current = <600>;
			flashlight_current = <40 50 70 170 250>;

			status = "okay";
		};
	};
};
